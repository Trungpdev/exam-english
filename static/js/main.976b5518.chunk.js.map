{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["URL","fetchData","a","fetch","then","res","json","App","useState","openExam","setOpenExam","data","setData","name","setName","isSubmit","setIsSubmit","falseCount","setFalseCount","openCopyPenalty","setOpenCopyPenalty","loading","setLoading","useEffect","console","log","mapping","entry","feed","map","i","gs$cell","forEach","row","index","value","correct","col","q","trim","toLowerCase","changeValue","elm","target","clone","className","type","onChange","id","border","item","bind","onClick","alert","valueNullCount","window","confirm","temp","mywindow","open","document","write","getElementById","innerHTML","close","focus","print","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.976b5518.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\n\n\nconst SHEET_KEY = '1pMkhEnCmNodO3dGAG6bJ9GdVNnmtSCcZEvhFEqQIY1M';\nconst URL = `https://spreadsheets.google.com/feeds/cells/${SHEET_KEY}/1/public/full?alt=json`;\nconst fetchData = async () => {\n  return await fetch(URL).then(res => {\n    return res.json();\n  })\n}\n\n\nfunction App() {\n  const [openExam, setOpenExam] = useState(false);\n  const [data, setData] = useState([]);\n  const [name, setName] = useState(\"k\");\n  const [isSubmit, setIsSubmit] = useState(false);\n  const [falseCount, setFalseCount] = useState(0);\n  const [openCopyPenalty, setOpenCopyPenalty] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n\n    fetchData().then(res => {\n      console.log(\"rs\", res)\n      const mapping = [];\n\n      const entry = res.feed.entry.map(i => i.gs$cell);\n      console.log('entry', entry)\n\n      entry.forEach(i => {\n        if (i.row > 1) {\n          const index = i.row - 2;\n          if (!mapping[index]) mapping[index] = { value: \"\", correct: true };\n\n          switch (i.col) {\n            case '1': mapping[index].q = i['$t'].trim(); break;\n            case '2': mapping[index].a = i['$t'].trim(); break;\n            default: break;\n          }\n        }\n        else {\n          console.log(i['$t'].toLowerCase() === 'on' ? true : false)\n          if (i.col === '5') setOpenExam(i['$t'].trim().toLowerCase() === 'on' ? true : false);\n        }\n      })\n      setData(mapping);\n      setLoading(false);\n\n      console.log(\"mapping:\", mapping)\n    })\n\n  }, [])\n\n  const changeValue = (index, elm) => {\n    console.log(\"index\", index, elm.target.value)\n    const clone = [...data];\n    clone[index].value = elm.target.value;\n    setData(clone);\n  }\n\n  const onSubmit = () => {\n    if (!name) {\n      window.alert(\"Bạn chưa nhập họ tên!\");\n      return;\n    }\n\n    let alert = \"Bạn chắc chắn muốn nộp bài?\";\n    let valueNullCount = 0;\n    data.forEach(item => {\n      if (item.value === \"\") valueNullCount++;\n    })\n    if (valueNullCount > 0) alert = `${alert} Bạn còn ${valueNullCount} câu chưa trả lời!`;\n\n    if (window.confirm(alert)) {\n      let temp = 0;\n      let clone = [...data];\n      data.forEach((item, index) =>{\n        if(item.value.trim().toLowerCase() !== item.a.toLowerCase()) {\n          temp++;\n          clone[index].correct = false;\n        }\n      })\n\n      setData(clone);\n      setFalseCount(temp);\n      setIsSubmit(true);\n    }\n  }\n\n  const toggleCopyPenalty = () => {\n    setOpenCopyPenalty(!openCopyPenalty);\n  }\n\n  const changeName = (elm) => {\n    setName(elm.target.value);\n  }\n\n  const printResult = () => {\n    var mywindow = window.open('', 'PRINT');\n\n    mywindow.document.write('<html><head><title>EXAM RESULT</title>');\n    mywindow.document.write('</head><body >');\n    // mywindow.document.write('<h1>' + document.title + '</h1>');\n    mywindow.document.write(document.getElementById('printable').innerHTML);\n    mywindow.document.write('</body></html>');\n\n    mywindow.document.close(); // necessary for IE >= 10\n    mywindow.focus(); // necessary for IE >= 10*/\n\n    mywindow.print();\n    mywindow.close();\n\n    return true;\n  }\n\n  if (loading) {\n    return (\n      <div className=\"App\">\n        <h1>Loading...</h1>\n      </div>\n    )\n  }\n\n  if (!openExam) {\n    return (\n      <div className=\"App\">\n        <h1>Bài thi chưa được mở!</h1>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>ENGLISH EXAM</h1>\n\n      <div>\n          <div>Full name:\n            <input type=\"text\" value={name} onChange={changeName} />\n          </div>\n        </div>\n\n      <div id=\"printable\">\n        <div className=\"container-table\">\n\n          <table border=\"1\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Question</th>\n                <th>Your Answer</th>\n                <th>Correct Answer</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.map((item, index) =>\n                <tr key={index}>\n                  <td>{index + 1}</td>\n                  <td>\n                    {item.q}\n                  </td>\n\n                  <td>\n                    <input type=\"text\" value={item.value} onChange={changeValue.bind(this, index)} />\n                  </td>\n\n                  <td>\n                    {isSubmit && item.a}\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <button onClick={onSubmit}>Nộp bài</button>\n      {falseCount > 0\n        &&\n        <button onClick={toggleCopyPenalty}>Bạn có {falseCount} từ phải chép phạt</button>\n      }\n      {isSubmit\n        &&\n        <button onClick={printResult}>In kết quả</button>\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n// const data = [];\n\n// fetchData().then(res =>{\n//     console.log(\"data\", res)\n//     const entry = res.feed.entry.map(i => i.gs$cell);\n//     console.log('entry', entry)\n\n//     entry.forEach(i =>{\n//         if(i.row > 1){\n//             const index = i.row - 2;\n//             if(!data[index]) data[index] = {};\n\n//             switch(i.col){\n//                 case '1': data[index].q = i['$t']; break;\n//                 case '2': data[index].a = i['$t']; break;\n//                 default: break;\n//             }\n//         }\n//     })\n\n//     console.log(\"mapping:\", data)\n//     const a = \"test\";\n\n//     var bodyTable = document.getElementById('body-table');\n//     bodyTable.innerHTML = `<tr><td>kkkkkkkk</td></tr>`\n//     console.log(\"bodyTable\", bodyTable)\n// })\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}